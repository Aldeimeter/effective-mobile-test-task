name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check code formatting
        run: npx prettier --check .

      - name: Lint Dockerfile with hadolint
        uses: hadolint/hadolint-action@54c9adbab1582c2ef04b2016b760714a4bfde3cf # v3.1.0
        with:
          dockerfile: Dockerfile

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - name: Build test Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          context: .
          target: test
          tags: user-management-service:test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run tests in Docker container
        run: docker run --rm user-management-service:test

  build:
    name: Build Production Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - name: Build production Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          context: .
          target: production
          tags: user-management-service:prod
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create test environment file
        run: |
          cat > .env << EOF
          NODE_ENV=production
          PORT=3000
          DATABASE_URL=postgresql://user:password@postgres:5432/userdb
          REDIS_URL=redis://redis:6379
          JWT_SECRET=test-secret-key-for-ci-testing
          JWT_ACCESS_EXPIRATION=15m
          JWT_REFRESH_EXPIRATION=7d
          POSTGRES_USER=user
          POSTGRES_PASSWORD=password
          POSTGRES_DB=userdb
          POSTGRES_PORT=5432
          REDIS_PORT=6379
          EOF

      - name: Start services with docker compose
        run: docker compose up -d

      - name: Wait for database to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          timeout 30 bash -c 'until docker compose exec -T postgres pg_isready -U user -d userdb; do sleep 1; done'
          echo "✓ Database is ready"

      - name: Run database migrations
        run: |
          docker compose exec -T app npx prisma migrate deploy
          echo "✓ Database migrations applied"

      - name: Wait for application to be healthy
        run: |
          echo "Waiting for application to start..."
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'
          echo "✓ Application is healthy"

      - name: Test health endpoint
        run: |
          response=$(curl -s http://localhost:3000/health)
          echo "Health endpoint response: $response"
          if echo "$response" | grep -q '"status":"ok"'; then
            echo "✓ Health check passed"
          else
            echo "✗ Health check failed"
            exit 1
          fi

      - name: Show application logs
        if: always()
        run: docker compose logs app

      - name: Cleanup
        if: always()
        run: docker compose down -v
